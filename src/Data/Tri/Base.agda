{-# OPTIONS --safe #-}
module Data.Tri.Base where

open import Foundations.Prelude
open import Data.Empty.Base renaming (elim to elim·µâ ; rec to rec·µâ)
open import Data.Bool.Base renaming (elim to elim·µá ; rec to rec·µá)
open import Data.Sum.Base
open import Data.Dec.Base renaming (elim to elim·µà ; rec to rec·µà)

data Tri {o ‚Ñì} {T : ùí∞ ‚Ñì} (_<_ : T ‚Üí T ‚Üí ùí∞ o) (x y : T) : ùí∞ (‚Ñì ‚äî o) where
  lt : (x<y :   x < y) (x‚â†y : x ‚â† y) (y‚âÆx : ¬¨ y < x) ‚Üí Tri _<_ x y
  eq : (x‚âÆy : ¬¨ x < y) (x=y : x Ôºù y) (y‚âÆx : ¬¨ y < x) ‚Üí Tri _<_ x y
  gt : (x‚âÆy : ¬¨ x < y) (x‚â†y : x ‚â† y) (y<x :   y < x) ‚Üí Tri _<_ x y

private variable
  o ‚Ñì ‚Ñì‚Ä≤ : Level

elim : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T} {C : Tri _<_ x y ‚Üí ùí∞ ‚Ñì‚Ä≤}
     ‚Üí ((x<y :   x < y) (x‚â†y : x ‚â† y) (y‚âÆx : ¬¨ y < x) ‚Üí C (lt x<y x‚â†y y‚âÆx))
     ‚Üí ((x‚âÆy : ¬¨ x < y) (x=y : x Ôºù y) (y‚âÆx : ¬¨ y < x) ‚Üí C (eq x‚âÆy x=y y‚âÆx))
     ‚Üí ((x‚âÆy : ¬¨ x < y) (x‚â†y : x ‚â† y) (y<x :   y < x) ‚Üí C (gt x‚âÆy x‚â†y y<x))
     ‚Üí (t : Tri _<_ x y) ‚Üí C t
elim tlt _   _   (lt x<y x‚â†y y‚âÆx) = tlt x<y x‚â†y y‚âÆx
elim _   teq _   (eq x‚âÆy x=y y‚âÆx) = teq x‚âÆy x=y y‚âÆx
elim _   _   tgt (gt x‚âÆy x‚â†y y<x) = tgt x‚âÆy x‚â†y y<x

rec : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T} {A : ùí∞ ‚Ñì‚Ä≤}
    ‚Üí A ‚Üí A ‚Üí A ‚Üí Tri _<_ x y ‚Üí A
rec alt aeq agt t =
  elim (Œª _ _ _ ‚Üí alt) (Œª _ _ _ ‚Üí aeq) (Œª _ _ _ ‚Üí agt) t

{-
asym-connex‚ÜíTri : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o}
                   ‚Üí (‚àÄ {x y} ‚Üí x < y ‚Üí ¬¨ (y < x))
                   ‚Üí (‚àÄ {x y} ‚Üí (x Ôºù y) ‚äé (x < y) ‚äé (y < x))
                   ‚Üí ‚àÄ {x y} ‚Üí Tri _<_ x y
asym-connex‚ÜíTri {_<_} as co {x} {y} with co {x} {y}
... | inl x=y       =
        eq (Œª x<y ‚Üí as x<y (subst (_< x) x=y $ subst (x <_) (x=y ‚Åª¬π) x<y))
           x=y
           Œª y<x ‚Üí as ((subst (x <_) x=y $ subst (_< x) (x=y ‚Åª¬π) y<x)) y<x
... | inr (inl x<y) =
        lt x<y
           (Œª x=y ‚Üí as x<y (subst (_< x) x=y $ subst (x <_) (x=y ‚Åª¬π) x<y))
           (as x<y)
... | inr (inr y<x) =
        gt (as y<x)
           (Œª x=y ‚Üí as ((subst (x <_) x=y $ subst (_< x) (x=y ‚Åª¬π) y<x)) y<x)
           y<x
-}

{- decidable projections -}

‚åä_‚åã‚âü : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T}
    ‚Üí Tri _<_ x y ‚Üí Dec (x Ôºù y)
‚åä_‚åã‚âü = elim (Œª _ x‚â†y _ ‚Üí no x‚â†y) (Œª _ x=y _ ‚Üí yes x=y) (Œª _ x‚â†y _ ‚Üí no x‚â†y)

-- TODO running out of symbol ideas
‚åä_‚åã<¬ø : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T}
      ‚Üí Tri _<_ x y ‚Üí Dec (x < y)
‚åä_‚åã<¬ø = elim (Œª x<y _ _ ‚Üí yes x<y) (Œª x‚âÆy _ _ ‚Üí no x‚âÆy) (Œª x‚âÆy _ _ ‚Üí no x‚âÆy)

{- boolean projections -}

‚åä_‚åã< : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T}
     ‚Üí Tri _<_ x y ‚Üí Bool
‚åä_‚åã< = rec true false false

‚åä_‚åã‚â§ : {T : ùí∞ ‚Ñì} {_<_ : T ‚Üí T ‚Üí ùí∞ o} {x y : T}
    ‚Üí Tri _<_ x y ‚Üí Bool
‚åä_‚åã‚â§ = rec true true false
