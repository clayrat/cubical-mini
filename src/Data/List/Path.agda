{-# OPTIONS --safe --no-exact-split #-}
module Data.List.Path where

open import Meta.Prelude
open import Meta.Extensionality

open import Logic.Discreteness

open import Data.Bool.Base
open import Data.Dec.Base
open import Data.Empty.Base
open import Data.List.Base
open import Data.Reflects.Base as Reflects
open import Data.Unit.Base

private variable
  ‚Ñì ‚Ñì‚Ä≤ ‚Ñì·µÉ : Level
  n : HLevel
  A : Type ‚Ñì·µÉ
  x y : A
  xs ys : List A
  b‚ÇÅ b‚ÇÇ : Bool

‚à∑-head-inj : x ‚à∑ xs Ôºù y ‚à∑ ys ‚Üí x Ôºù y
‚à∑-head-inj {x} = ap (head x)

‚à∑-tail-inj : x ‚à∑ xs Ôºù y ‚à∑ ys ‚Üí xs Ôºù ys
‚à∑-tail-inj = ap tail

module _ {A : ùí∞ ‚Ñì·µÉ} ‚¶É sa : Extensional A ‚Ñì ‚¶Ñ where
  Code-List : List A ‚Üí List A ‚Üí ùí∞ ‚Ñì
  Code-List []       []       = ‚ä§
  Code-List (x ‚à∑ xs) (y ‚à∑ ys) = sa .Path·µâ x y √ó Code-List xs ys
  Code-List _ _ = ‚ä•

  code-list-refl : (xs : List A) ‚Üí Code-List xs xs
  code-list-refl []       = _
  code-list-refl (x ‚à∑ xs) = sa .refl·µâ x , code-list-refl xs

  decode-list : Code-List xs ys ‚Üí xs Ôºù ys
  decode-list {xs = []}     {([])}   _       = refl
  decode-list {xs = x ‚à∑ xs} {y ‚à∑ ys} (p , c) = ap¬≤ _‚à∑_ (sa .ids·µâ .to-path p) (decode-list c)

  code-list-refl·¥æ
    : (c : Code-List xs ys)
    ‚Üí code-list-refl xs Ôºù[ ap (Code-List xs) (decode-list c) ]Ôºù c
  code-list-refl·¥æ {xs = []}     {([])}   _       = refl
  code-list-refl·¥æ {xs = x ‚à∑ xs} {y ‚à∑ ys} (p , c) = sa .ids·µâ .to-path-over p ,‚Çö code-list-refl·¥æ c

  instance
    Extensional-List : Extensional (List A) ‚Ñì
    Extensional-List .Path·µâ = Code-List
    Extensional-List .refl·µâ = code-list-refl
    Extensional-List .ids·µâ .to-path = decode-list
    Extensional-List .ids·µâ .to-path-over = code-list-refl·¥æ

opaque
  code-list-is-of-hlevel
    : {n : HLevel} {xs ys : List A} ‚Üí is-of-hlevel (2 + n) A ‚Üí is-of-hlevel (1 + n) (Code-List xs ys)
  code-list-is-of-hlevel {xs = []}     {([])}   _  = hlevel _
  code-list-is-of-hlevel {xs = x ‚à∑ xs} {y ‚à∑ ys} hl =
    √ó-is-of-hlevel _ (hl x y) (code-list-is-of-hlevel {xs = xs} hl)
  code-list-is-of-hlevel {xs = []}     {_ ‚à∑ _}  _  = hlevel _
  code-list-is-of-hlevel {xs = x ‚à∑ xs} {([])}   _  = hlevel _

  list-is-of-hlevel : (n : HLevel)
                    ‚Üí is-of-hlevel (2 + n) A
                    ‚Üí is-of-hlevel (2 + n) (List A)
  list-is-of-hlevel n A-hl xs _ =
    ‚âÉ‚Üíis-of-hlevel (1 + n)
                   (identity-system-gives-path (Extensional-List .ids·µâ) ‚Åª¬π)
                   (code-list-is-of-hlevel {xs = xs} A-hl)

instance opaque
  H-Level-List : ‚àÄ {n} ‚Üí ‚¶É n ‚â• ∞ 2 ‚¶Ñ ‚Üí ‚¶É A-hl : H-Level n A ‚¶Ñ ‚Üí H-Level n (List A)
  H-Level-List {n} ‚¶É s‚â§ ∞s (s‚â§ ∞s _) ‚¶Ñ .H-Level.has-of-hlevel = list-is-of-hlevel _ (hlevel n)
  {-# OVERLAPPING H-Level-List #-}

instance
  Reflects-‚à∑‚â†[] : Reflects (x ‚à∑ xs Ôºù []) false
  Reflects-‚à∑‚â†[] = of‚Åø Œª p ‚Üí ¬¨-so-false (subst So (ap is-cons? p) oh)

  Reflects-[]‚â†‚à∑ : Reflects ([] Ôºù x ‚à∑ xs) false
  Reflects-[]‚â†‚à∑ = of‚Åø Œª p ‚Üí ¬¨-so-false (subst So (ap is-nil? p) oh)

  Reflects-‚à∑=‚à∑ : ‚¶É rh : Reflects (x Ôºù y) b‚ÇÅ ‚¶Ñ ‚¶É rt : Reflects (xs Ôºù ys) b‚ÇÇ ‚¶Ñ ‚Üí Reflects (x ‚à∑ xs Ôºù y ‚à∑ ys) (b‚ÇÅ and b‚ÇÇ)
  Reflects-‚à∑=‚à∑ = Reflects.dmap (Œª p ‚Üí ap¬≤ _‚à∑_ (p .fst) (p .snd)) (contra < ‚à∑-head-inj , ‚à∑-tail-inj >) auto

  List-is-discrete : ‚¶É d : is-discrete A ‚¶Ñ ‚Üí is-discrete (List A)
  List-is-discrete {x = []}     {([])}   = true because auto
  List-is-discrete {x = []}     {_ ‚à∑ _}  = false because auto
  List-is-discrete {x = _ ‚à∑ _}  {([])}   = false because auto
  List-is-discrete {x = x ‚à∑ xs} {y ‚à∑ ys} .does  = (x =? y) and ‚åä List-is-discrete {x = xs} {y = ys} ‚åã
  List-is-discrete {x = x ‚à∑ xs} {y ‚à∑ ys} .proof = Reflects-‚à∑=‚à∑ ‚¶É auto ‚¶Ñ ‚¶É List-is-discrete {x = xs} {y = ys} .proof ‚¶Ñ

opaque
  ‚à∑‚â†[] : x ‚à∑ xs ‚â† []
  ‚à∑‚â†[] = false!

opaque
  []‚â†‚à∑ : [] ‚â† x ‚à∑ xs
  []‚â†‚à∑ = false!
