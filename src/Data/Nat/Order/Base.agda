{-# OPTIONS --safe #-}
module Data.Nat.Order.Base where

open import Meta.Prelude
open Variadics _

open import Logic.Decidability

open import Data.Acc.Base
open import Data.Bool.Base
open import Data.Dec.Base as Dec
open import Data.Empty.Base as ‚ä•
open import Data.Empty.Properties
open import Data.Nat.Base
open import Data.Nat.Order.Inductive.Base
  using ( _‚â§?_ ; _<?_ ; _‚â•?_ ; _>?_
        ; _‚â∞?_ ; _‚âÆ?_ ; _‚â±?_ ; _‚âØ?_
        )
open import Data.Nat.Path
open import Data.Nat.Properties
open import Data.Nat.Solver
open import Data.Reflects.Base as Reflects
open import Data.Sum.Base
open import Data.Sum.Path
open import Data.Truncation.Propositional.Base
open import Data.Truncation.Propositional.Path

private variable
  m n k : ‚Ñï

infix 3 _‚â§_ _<_ _‚â•_ _>_
        _‚â∞_ _‚âÆ_ _‚â±_ _‚âØ_

opaque
  _‚â§_ _<_ : Corr _ (‚Ñï , ‚Ñï) 0‚Ñì

  m ‚â§ n = Œ£[ k Íûâ ‚Ñï ] (m + k Ôºù n)
  m < n = suc m ‚â§ n

_‚â•_ _>_ _‚â∞_ _‚âÆ_ _‚â±_ _‚âØ_ : Corr _ (‚Ñï , ‚Ñï) 0‚Ñì

m ‚â• n =   n ‚â§ m
m > n =   n < m
m ‚â∞ n = ¬¨ m ‚â§ n
m ‚âÆ n = ¬¨ m < n
m ‚â± n = ¬¨ m ‚â• n
m ‚âØ n = ¬¨ m > n


opaque
  unfolding _‚â§_

  ‚â§-is-prop : is-prop (m ‚â§ n)
  ‚â§-is-prop (_ , p) (_ , q) = Œ£-prop-path! (+-inj-l _ _ _ (p ‚àô q ‚Åª¬π))

  <-is-prop : is-prop (m < n)
  <-is-prop = ‚â§-is-prop

instance opaque
  H-Level-‚â§ : ‚¶É k ‚â• ∞ 1 ‚¶Ñ ‚Üí H-Level k (m ‚â§ n)
  H-Level-‚â§ ‚¶É s‚â§ ∞s _ ‚¶Ñ = hlevel-prop-instance ‚â§-is-prop
  {-# INCOHERENT H-Level-‚â§ #-}

  H-Level-< : ‚¶É k ‚â• ∞ 1 ‚¶Ñ ‚Üí H-Level k (m < n)
  H-Level-< ‚¶É s‚â§ ∞s _ ‚¶Ñ = hlevel-prop-instance <-is-prop
  {-# INCOHERENT H-Level-< #-}

-- Properties of order

opaque
  unfolding _‚â§_

  z‚â§ : 0 ‚â§ n
  z‚â§ = _ , refl

  s‚â§s : m ‚â§ n ‚Üí suc m ‚â§ suc n
  s‚â§s = second (ap suc)

  ‚â§-peel : suc m ‚â§ suc n ‚Üí m ‚â§ n
  ‚â§-peel = second suc-inj

  ‚â§-peel-unpeel : (p : suc m ‚â§ suc n) ‚Üí s‚â§s (‚â§-peel p) Ôºù p
  ‚â§-peel-unpeel (_ , _) = refl ,‚Çö prop!

  ‚â§-refl : n ‚â§ n
  ‚â§-refl = 0 , nat!

  ‚â§-trans : m ‚â§ n ‚Üí n ‚â§ k ‚Üí m ‚â§ k
  ‚â§-trans {k} (Œ¥‚ÇÅ , p) (Œ¥‚ÇÇ , q)
    = Œ¥‚ÇÅ + Œ¥‚ÇÇ
    , nat! ‚àô subst (Œª œÜ ‚Üí œÜ + Œ¥‚ÇÇ Ôºù k) (sym‚Çö p) q

  ‚â§-antisym : m ‚â§ n ‚Üí n ‚â§ m ‚Üí m Ôºù n
  ‚â§-antisym (0      , p) (_      , _) = sym (+-zero-r _) ‚àô p
  ‚â§-antisym (suc _  , _) (0      , q) = sym q ‚àô +-zero-r _
  ‚â§-antisym {m} (suc Œ¥‚ÇÅ , p) (suc Œ¥‚ÇÇ , q) =
    false! $ (+-assoc m _ _ ‚àô subst (Œª œÜ ‚Üí œÜ + suc Œ¥‚ÇÇ Ôºù m) (sym p) q) ‚Åª¬π

  ‚â§-suc-r : m ‚â§ n ‚Üí m ‚â§ suc n
  ‚â§-suc-r = bimap suc Œª p ‚Üí nat! ‚àô ap suc p

  ‚â§-ascend : n ‚â§ suc n
  ‚â§-ascend = 1 , nat!

  instance
    Refl-‚â§ : Refl _‚â§_
    Refl-‚â§ .refl = ‚â§-refl
    {-# OVERLAPPING Refl-‚â§ #-}

    Trans-‚â§ : Trans _‚â§_
    Trans-‚â§ ._‚àô_ = ‚â§-trans
    {-# OVERLAPPING Trans-‚â§ #-}

    Reflects-suc‚â∞id : Reflects (suc n ‚â§ n) false
    Reflects-suc‚â∞id = of‚Åø Œª where (k , p) ‚Üí false! ((+-suc-r _ k ‚àô p) ‚Åª¬π)
    {-# INCOHERENT Reflects-suc‚â∞id #-}

    Reflects-suc‚â∞z : Reflects (suc n ‚â§ 0) false
    Reflects-suc‚â∞z = of‚Åø (false! ‚àò snd)
    {-# INCOHERENT Reflects-suc‚â∞z #-}

  suc‚â∞id : suc n ‚â∞ n
  suc‚â∞id = false!

  s‚â∞z : suc n ‚â∞ 0
  s‚â∞z = false!

  ‚â§0‚Üí=0 : n ‚â§ 0 ‚Üí n Ôºù 0
  ‚â§0‚Üí=0 {n} (k , p) = +=0-2 n k p .fst

  ‚â§-subst : {a b c d : ‚Ñï} ‚Üí a Ôºù b ‚Üí c Ôºù d ‚Üí a ‚â§ c ‚Üí b ‚â§ d
  ‚â§-subst a=b c=d = second $ subst¬≤ (Œª u v ‚Üí u + _ Ôºù v) a=b c=d

=‚Üí‚â§ : m Ôºù n ‚Üí m ‚â§ n
=‚Üí‚â§ {m} {n} e = subst (m ‚â§_) e ‚â§-refl

‚â§‚âÉ‚â§+l : (n ‚â§ k) ‚âÉ (m + n ‚â§ m + k)
‚â§‚âÉ‚â§+l {n} {k} {m} = prop-ext‚Çë! (ff m n k) (gg m n k)
  where
  ff : (a b c : ‚Ñï) ‚Üí b ‚â§ c ‚Üí a + b ‚â§ a + c
  ff zero    b c p = p
  ff (suc a) b c p = s‚â§s (ff a b c p)

  gg : (a b c : ‚Ñï) ‚Üí a + b ‚â§ a + c ‚Üí b ‚â§ c
  gg  zero   b c p = p
  gg (suc a) b c p = gg a b c (‚â§-peel p)

‚â§‚âÉ‚â§+r : (n ‚â§ k) ‚âÉ (n + m ‚â§ k + m)
‚â§‚âÉ‚â§+r {n} {k} {m} = ‚â§‚âÉ‚â§+l ‚àô subst (Œª q ‚Üí q ‚â§ m + k ‚âÉ n + m ‚â§ k + m) (+-comm n m)
                             (subst (Œª q ‚Üí n + m ‚â§ q ‚âÉ n + m ‚â§ k + m) (+-comm k m) refl)

-- Properties of strict order

opaque
  unfolding _<_

  <-irr : n ‚âÆ n
  <-irr = false!

  s<s : m < n ‚Üí suc m < suc n
  s<s = s‚â§s

  <-peel : suc m < suc n ‚Üí m < n
  <-peel = ‚â§-peel

  <-weaken : (x y : ‚Ñï) ‚Üí x < y ‚Üí x ‚â§ y
  <-weaken x y (Œ¥ , p) = suc Œ¥ , nat! ‚àô p

  <-trans : m < n ‚Üí n < k ‚Üí m < k
  <-trans (Œ¥‚ÇÅ , p) (Œ¥‚ÇÇ , q)
    = suc (Œ¥‚ÇÅ + Œ¥‚ÇÇ)
    , nat! ‚àô subst (Œª œÜ ‚Üí suc (œÜ + Œ¥‚ÇÇ) Ôºù _) (sym‚Çö p) q

  <-asym : ‚àÄ[ _<_ ‚áí _‚âØ_ ]
  <-asym {x = m} {x = n} (Œ¥‚ÇÅ , p) (Œ¥‚ÇÇ , q) = false! u where
    u : m Ôºù m + (2 + Œ¥‚ÇÅ + Œ¥‚ÇÇ)
    u = subst (Œª œÜ ‚Üí suc (œÜ + Œ¥‚ÇÇ) Ôºù m) (p ‚Åª¬π) q ‚Åª¬π ‚àô nat!

  <-suc-r : m < n ‚Üí m < suc n
  <-suc-r = ‚â§-suc-r

  <-suc-l : suc m < n ‚Üí m < n
  <-suc-l (Œ¥ , p) = suc Œ¥ , nat! ‚àô p

  <-ascend : n < suc n
  <-ascend = 0 , +-zero-r _

  ‚âÆz : n ‚âÆ 0
  ‚âÆz = false!

  z<s : 0 < suc n
  z<s = _ , refl

opaque
  unfolding _‚â§_ _<_
  <‚âÉ<+l : (n < k) ‚âÉ (m + n < m + k)
  <‚âÉ<+l {n} {k} {m} = ‚â§‚âÉ‚â§+l {n = suc n}
                    ‚àô subst (Œª q ‚Üí q ‚â§ m + k ‚âÉ m + n < m + k) (+-suc-r m n ‚Åª¬π) refl

  <‚âÉ<+r : (n < k) ‚âÉ (n + m < k + m)
  <‚âÉ<+r {n} = ‚â§‚âÉ‚â§+r {n = suc n}

  ‚â§-<-trans : {x y z : ‚Ñï} ‚Üí x ‚â§ y ‚Üí y < z ‚Üí x < z
  ‚â§-<-trans p = ‚â§-trans (s‚â§s p)

  <-‚â§-trans : {x y z : ‚Ñï} ‚Üí x < y ‚Üí y ‚â§ z ‚Üí x < z
  <-‚â§-trans = ‚â§-trans

-- Conversion

opaque
  unfolding _<_
  <‚Üí‚â§ : ‚àÄ[ _<_ ‚áí _‚â§_ ]
  <‚Üí‚â§ = bimap suc (nat! ‚àô_)

  <‚Üí‚â† : ‚àÄ[ _<_ ‚áí _‚â†_ ]
  <‚Üí‚â† m<n m=n = false! $ subst (_ <_) (sym m=n) m<n

  ‚â§‚Üí‚âØ : ‚àÄ[ _‚â§_ ‚áí _‚âØ_ ]
  ‚â§‚Üí‚âØ {x = m} {x = n} (Œ¥‚ÇÅ , p) (Œ¥‚ÇÇ , q) = false! u where
    u : m Ôºù m + suc (Œ¥‚ÇÅ + Œ¥‚ÇÇ)
    u = subst (Œª œÜ ‚Üí suc (œÜ + Œ¥‚ÇÇ) Ôºù m) (sym‚Çö p) q ‚Åª¬π ‚àô nat!

  ‚â§‚Üí<‚äé= : ‚àÄ[ _‚â§_ ‚áí _<_ ‚äé _Ôºù_ ]
  ‚â§‚Üí<‚äé= (0     , p) = inr $ nat! ‚àô p
  ‚â§‚Üí<‚äé= (suc Œ¥ , p) = inl $ Œ¥ , nat! ‚àô p

  <‚äé=‚Üí‚â§ : ‚àÄ[ _<_ ‚äé _Ôºù_ ‚áí _‚â§_ ]
  <‚äé=‚Üí‚â§ (inl m<n) = <‚Üí‚â§ m<n
  <‚äé=‚Üí‚â§ (inr m=n) = subst (_‚â§ _) (sym m=n) ‚â§-refl

<‚Üí‚â± : ‚àÄ[ _<_ ‚áí _‚â±_ ]
<‚Üí‚â± m<n m‚â•n = ‚â§‚Üí‚âØ m‚â•n m<n

‚âØ‚Üí‚â§ : ‚àÄ[ _‚âØ_ ‚áí _‚â§_ ]
‚âØ‚Üí‚â§ {0}     {_}     _ = z‚â§
‚âØ‚Üí‚â§ {suc _} {0}     f = false! $ f z<s
‚âØ‚Üí‚â§ {suc _} {suc _} f = s‚â§s $ ‚âØ‚Üí‚â§ (f ‚àò s<s)

‚â±‚Üí< : ‚àÄ[ _‚â±_ ‚áí _<_ ]
‚â±‚Üí< {_}     {0}     f = false! $ f z‚â§
‚â±‚Üí< {0}     {suc _} _ = z<s
‚â±‚Üí< {suc m} {suc n} f = s<s $ ‚â±‚Üí< (f ‚àò s‚â§s)

opaque
  unfolding _<_
  <‚âÉsuc‚â§ : (suc m ‚â§ n) ‚âÉ (m < n)
  <‚âÉsuc‚â§ = refl

  ‚â§‚âÉ<suc : (m ‚â§ n) ‚âÉ (m < suc n)
  ‚â§‚âÉ<suc = Œ£-ap-snd Œª x ‚Üí s=s‚âÉ

‚â§‚âÉ‚âØ : (m ‚â§ n) ‚âÉ (m ‚âØ n)
‚â§‚âÉ‚âØ = prop-ext‚Çë! ‚â§‚Üí‚âØ ‚âØ‚Üí‚â§

<‚âÉ‚â± : (m < n) ‚âÉ (m ‚â± n)
<‚âÉ‚â± = prop-ext‚Çë! <‚Üí‚â± ‚â±‚Üí<

‚â§‚âÉ<‚äé= : (m ‚â§ n) ‚âÉ ((m < n) ‚äé (m Ôºù n))
‚â§‚âÉ<‚äé= = prop-ext‚Çë (hlevel 1) (disjoint-‚äé-is-prop! (<‚Üí‚â† $‚Çú¬≤_)) ‚â§‚Üí<‚äé= <‚äé=‚Üí‚â§


-- Decidability

instance
  <-reflects : Reflects (m < n) (m <? n)
  <-reflects {_}     {0}     = of‚Åø ‚âÆz
  <-reflects {0}     {suc _} = of ∏ z<s
  <-reflects {suc m} {suc n} =
    Reflects.dmap s<s (_‚àò <-peel) $ <-reflects {m} {n}

  ‚â§-reflects : Reflects (m ‚â§ n) (m ‚â§? n)
  ‚â§-reflects {0}     {_}     = of ∏ z‚â§
  ‚â§-reflects {suc _} {0}     = of‚Åø false!
  ‚â§-reflects {suc m} {suc n} =
    Reflects.dmap s‚â§s (_‚àò ‚â§-peel) $ ‚â§-reflects {m} {n}

  <-dec : Decidable _<_
  <-dec = _ because auto

  ‚â§-dec : Decidable _‚â§_
  ‚â§-dec = _ because auto

-- TODO use trichotomy
‚â§-split : Œ†[ _<_ ‚äé _>_ ‚äé _Ôºù_ ]
‚â§-split m n = case·µà m < n of Œª where
  (yes m<n) ‚Üí inl m<n
  (no  m‚âÆn) ‚Üí case·µà n < m of Œª where
    (yes n<m) ‚Üí inr $ inl n<m
    (no  n‚âÆm) ‚Üí inr $ inr $ ‚â§-antisym (‚â§‚âÉ‚âØ ‚Åª¬π $ n‚âÆm) (‚â§‚âÉ‚âØ ‚Åª¬π $ m‚âÆn)

-- local extensionality

<-lext : ‚àÄ {x y} ‚Üí (‚àÄ z ‚Üí (z < x) ‚âÉ (z < y)) ‚Üí x Ôºù y
<-lext {x = zero}  {y = zero}  _ = refl
<-lext {x = zero}  {y = suc _} f = ‚ä•.rec (‚âÆz (f 0 ‚Åª¬π $ z<s))
<-lext {x = suc _} {y = zero}  f = ‚ä•.rec (‚âÆz (f 0 $ z<s))
<-lext {x = suc x} {y = suc y} f = ap suc (<-lext Œª z ‚Üí <‚âÉ<+l ‚àô f (suc z) ‚àô <‚âÉ<+l ‚Åª¬π)

-- well-foundedness

opaque
  unfolding _<_
  <-ind : ‚àÄ {‚Ñì‚Ä≥} {P : ‚Ñï ‚Üí ùí∞ ‚Ñì‚Ä≥}
        ‚Üí (‚àÄ x ‚Üí (‚àÄ y ‚Üí y < x ‚Üí P y) ‚Üí P x)
        ‚Üí ‚àÄ x ‚Üí P x
  <-ind {P} ih x = go x (suc x) <-ascend
    where
    go : ‚àÄ m n ‚Üí m < n ‚Üí P m
    go m  zero   m<n     = false! m<n
    go m (suc n) (q , e) = ih m Œª y y<m ‚Üí go y n (‚â§-trans y<m (q , suc-inj e))

<-is-wf : is-wf _<_
<-is-wf = from-induction Œª P ‚Üí <-ind

-- addition

opaque
  unfolding _‚â§_
  ‚â§-+-r : m ‚â§ m + n
  ‚â§-+-r {m} {n} = n , refl

‚â§-+-l : m ‚â§ n + m
‚â§-+-l {m} {n} = subst (m ‚â§_) (+-comm m n) ‚â§-+-r

<-+-l : m < n ‚Üí m < k + n
<-+-l m<n = <-‚â§-trans m<n ‚â§-+-l

<-+-r : m < n ‚Üí m < n + k
<-+-r m<n = <-‚â§-trans m<n ‚â§-+-r

opaque
  unfolding _<_
  <-+-lr : m < suc n + m
  <-+-lr {m} {n} = n , ap suc (+-comm m n)

<-+-0lr : 0 < n ‚Üí m < n + m
<-+-0lr {n = zero}  0<n = false! 0<n
<-+-0lr {n = suc n} 0<n = <-+-lr

‚â§-+ : ‚àÄ {m n p q} ‚Üí m ‚â§ p ‚Üí n ‚â§ q ‚Üí m + n ‚â§ p + q
‚â§-+ m‚â§p n‚â§q = ‚â§-trans (‚â§‚âÉ‚â§+r $ m‚â§p) (‚â§‚âÉ‚â§+l $ n‚â§q)

opaque
  unfolding _<_
  <-‚â§-+ : ‚àÄ {m n p q} ‚Üí m < p ‚Üí n ‚â§ q ‚Üí m + n < p + q
  <-‚â§-+ = ‚â§-+

  ‚â§-<-+ : ‚àÄ {m n p q} ‚Üí m ‚â§ p ‚Üí n < q ‚Üí m + n < p + q
  ‚â§-<-+ {m} {n} {p} {q} m‚â§p n<q =
    subst (_‚â§ p + q) (+-suc-r m n) (‚â§-+ m‚â§p n<q)

<-+ : ‚àÄ {m n p q} ‚Üí m < p ‚Üí n < q ‚Üí m + n < p + q
<-+ m<p n<q = <-‚â§-+ m<p (<‚Üí‚â§ n<q)

0<‚âÉ‚äé‚ÇÅ : ‚àÄ {m n} ‚Üí 0 < m + n ‚âÉ (0 < m) ‚äé‚ÇÅ (0 < n)
0<‚âÉ‚äé‚ÇÅ {m} {n} = prop-ext‚Çë! (‚à£_‚à£‚ÇÅ ‚àò 0<‚Üí‚äé m n) (elim! [ <-+-r , <-+-l ]·µ§)
  where
  0<‚Üí‚äé : ‚àÄ x y ‚Üí 0 < x + y ‚Üí (0 < x) ‚äé (0 < y)
  0<‚Üí‚äé  zero   y h = inr h
  0<‚Üí‚äé (suc x) y _ = inl z<s


-- subtraction

+‚à∏=id : ‚àÄ m n ‚Üí m ‚â§ n ‚Üí m + (n ‚à∏ m) Ôºù n
+‚à∏=id  zero    n      m‚â§n = refl
+‚à∏=id (suc m)  zero   m‚â§n = false! m‚â§n
+‚à∏=id (suc m) (suc n) m‚â§n = ap suc (+‚à∏=id m n (‚â§-peel m‚â§n))

‚à∏+=id : ‚àÄ m n ‚Üí m ‚â§ n ‚Üí (n ‚à∏ m) + m Ôºù n
‚à∏+=id m n m‚â§n = +-comm (n ‚à∏ m) m ‚àô +‚à∏=id m n m‚â§n

+‚à∏-assoc : ‚àÄ m n p ‚Üí p ‚â§ n ‚Üí m + (n ‚à∏ p) Ôºù m + n ‚à∏ p
+‚à∏-assoc m n p p‚â§n =
    sym (+-cancel-‚à∏-r (m + (n ‚à∏ p)) p)
  ‚àô ap (_‚à∏ p) (sym (+-assoc m (n ‚à∏ p) p))
  ‚àô ap (Œª q ‚Üí m + q ‚à∏ p) (+-comm (n ‚à∏ p) p ‚àô +‚à∏=id p n p‚â§n)

‚à∏+-comm : ‚àÄ m n p ‚Üí n ‚â§ m ‚Üí m ‚à∏ n + p Ôºù m + p ‚à∏ n
‚à∏+-comm m n p n‚â§m = +-comm (m ‚à∏ n) p
                  ‚àô +‚à∏-assoc p m n n‚â§m
                  ‚àô ap (_‚à∏ n) (+-comm p m)

‚à∏‚à∏-assoc-swap : ‚àÄ m n p ‚Üí p ‚â§ n ‚Üí m ‚à∏ (n ‚à∏ p) Ôºù m + p ‚à∏ n
‚à∏‚à∏-assoc-swap m n p p‚â§n = sym (‚à∏-cancel-+-r m p (n ‚à∏ p)) ‚àô ap ((m + p) ‚à∏_) (‚à∏+=id p n p‚â§n)

‚à∏‚à∏-assoc : ‚àÄ m n p ‚Üí p ‚â§ n ‚Üí n ‚â§ m ‚Üí m ‚à∏ (n ‚à∏ p) Ôºù m ‚à∏ n + p
‚à∏‚à∏-assoc m n p p‚â§n n‚â§m = ‚à∏‚à∏-assoc-swap m n p p‚â§n ‚àô sym (‚à∏+-comm m n p n‚â§m)

suc-‚à∏ : ‚àÄ m n ‚Üí m ‚â§ n ‚Üí suc (n ‚à∏ m) Ôºù (suc n) ‚à∏ m
suc-‚à∏ m n = +‚à∏-assoc 1 n m

‚à∏=0‚Üí‚â§ : m ‚à∏ n Ôºù 0 ‚Üí m ‚â§ n
‚à∏=0‚Üí‚â§ {m = zero}              _ = z‚â§
‚à∏=0‚Üí‚â§ {m = suc m} {n = zero}  e = false! e
‚à∏=0‚Üí‚â§ {m = suc m} {n = suc n} e = s‚â§s (‚à∏=0‚Üí‚â§ {m} {n} e)

opaque
  unfolding _‚â§_
  ‚â§‚Üí‚à∏=0 : m ‚â§ n ‚Üí m ‚à∏ n Ôºù 0
  ‚â§‚Üí‚à∏=0 {m} (k , e) = ap (m ‚à∏_) (sym e) ‚àô ‚à∏-+-assoc m m k ‚àô ap (_‚à∏ k) (‚à∏-cancel m) ‚àô ‚à∏-zero-l k

‚à∏=0‚âÉ‚â§ : (m ‚à∏ n Ôºù 0) ‚âÉ (m ‚â§ n)
‚à∏=0‚âÉ‚â§ = prop-ext‚Çë! ‚à∏=0‚Üí‚â§ ‚â§‚Üí‚à∏=0

‚à∏‚â§‚âÉ‚â§+ : ‚àÄ {m n p} ‚Üí (m ‚à∏ n ‚â§ p) ‚âÉ (m ‚â§ n + p)
‚à∏‚â§‚âÉ‚â§+ {m} {n} {p} = ‚à∏=0‚âÉ‚â§ ‚Åª¬π ‚àô whisker-path-l‚Çë (sym (‚à∏-+-assoc n m p)) ‚àô ‚à∏=0‚âÉ‚â§

‚â§-‚à∏-l-‚âÉ : ‚àÄ {m n p} ‚Üí (m ‚à∏ n ‚â§ p) ‚âÉ (m ‚à∏ p ‚â§ n)
‚â§-‚à∏-l-‚âÉ {m} {n} {p} = ‚à∏‚â§‚âÉ‚â§+ ‚àô subst (Œª q ‚Üí m ‚â§ n + p ‚âÉ m ‚â§ q) (+-comm n p) refl ‚àô ‚à∏‚â§‚âÉ‚â§+ ‚Åª¬π

<-‚à∏-r-‚âÉ : ‚àÄ {m n p} ‚Üí (n < p ‚à∏ m) ‚âÉ (m + n < p)
<-‚à∏-r-‚âÉ {m} {n} {p} = <‚âÉ‚â± ‚àô ¬¨-‚âÉ (‚à∏‚â§‚âÉ‚â§+ .fst) ((‚à∏‚â§‚âÉ‚â§+ ‚Åª¬π) .fst) ‚àô <‚âÉ‚â± ‚Åª¬π

‚â§-‚à∏-r-‚âÉ : ‚àÄ {m n p} ‚Üí 0 < n ‚Üí (n ‚â§ p ‚à∏ m) ‚âÉ (m + n ‚â§ p)
‚â§-‚à∏-r-‚âÉ     {n = zero}      n>0 = false! n>0
‚â§-‚à∏-r-‚âÉ {m} {n = suc n} {p} n>0 = <‚âÉsuc‚â§ ‚àô <-‚à∏-r-‚âÉ ‚àô <‚âÉsuc‚â§ ‚Åª¬π
                                ‚àô subst (Œª q ‚Üí q ‚â§ p ‚âÉ m + suc n ‚â§ p) (+-suc-r m n) refl

<-‚à∏-l-‚âÉ : ‚àÄ {m n p} ‚Üí 0 < p ‚Üí (m ‚à∏ n < p) ‚âÉ (m < n + p)
<-‚à∏-l-‚âÉ         {p = zero}  p>0 = absurd (‚âÆz p>0)
<-‚à∏-l-‚âÉ {m} {n} {p = suc p} p>0 = <‚âÉsuc‚â§ ‚Åª¬π ‚àô ‚â§‚âÉ‚â§+l {m = 1} ‚Åª¬π ‚àô ‚à∏‚â§‚âÉ‚â§+ {m} {n} ‚àô ‚â§‚âÉ‚â§+l
                                ‚àô subst (Œª q ‚Üí suc m ‚â§ q ‚âÉ suc m ‚â§ n + suc p) (+-suc-r n p) refl ‚àô <‚âÉsuc‚â§

opaque
  unfolding _‚â§_
  ‚â§‚ÜíŒ£ : ‚àÄ m n ‚Üí m ‚â§ n ‚Üí Œ£[ k Íûâ ‚Ñï ] (m + k Ôºù n)
  ‚â§‚ÜíŒ£ m n = id
