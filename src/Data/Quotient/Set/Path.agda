{-# OPTIONS --safe #-}
module Data.Quotient.Set.Path where

open import Meta.Prelude
open import Meta.Extensionality

open import Data.Quotient.Set.Base

instance opaque
  H-Level-/‚ÇÇ
    : ‚àÄ{‚Ñì·µÉ ‚Ñì}{A : Type ‚Ñì·µÉ} {R : A ‚Üí A ‚Üí ùí∞ ‚Ñì}
    ‚Üí ‚àÄ {n} ‚Üí ‚¶É n ‚â• ∞ 2 ‚¶Ñ ‚Üí H-Level n (A / R)
  H-Level-/‚ÇÇ ‚¶É s‚â§ ∞s (s‚â§ ∞s _) ‚¶Ñ = hlevel-basic-instance 2 squash/
  {-# OVERLAPS H-Level-/‚ÇÇ #-}

instance
  Extensional-/‚ÇÇ-map
    : ‚àÄ {‚Ñì ‚Ñì‚Ä≤ ‚Ñì‚Ä≥ ‚Ñìr} {A : Type ‚Ñì} {R : A ‚Üí A ‚Üí Type ‚Ñì‚Ä≤} {B : Type ‚Ñì‚Ä≥}
      ‚¶É sf : Extensional (A ‚Üí B) ‚Ñìr ‚¶Ñ ‚¶É B-set : H-Level 2 B ‚¶Ñ
    ‚Üí Extensional (A / R ‚Üí B) ‚Ñìr
  Extensional-/‚ÇÇ-map ‚¶É sf ‚¶Ñ .Path·µâ f g = sf .Path·µâ (f ‚àò ‚¶ã_‚¶å) (g ‚àò ‚¶ã_‚¶å)
  Extensional-/‚ÇÇ-map ‚¶É sf ‚¶Ñ .refl·µâ f = sf .refl·µâ (f ‚àò ‚¶ã_‚¶å)
  Extensional-/‚ÇÇ-map ‚¶É sf ‚¶Ñ .ids·µâ .to-path h = fun-ext $ elim! (sf .ids·µâ .to-path h $‚Çö_)
  Extensional-/‚ÇÇ-map ‚¶É sf ‚¶Ñ .ids·µâ .to-path-over p =
    is-prop‚Üípath·¥æ (Œª i ‚Üí Path·µâ-is-of-hlevel 1 sf (hlevel 2)) _ p
