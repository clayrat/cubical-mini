{-# OPTIONS --safe #-}
module Foundations.Notation.Inverse.Left where

open import Foundations.Prim.Kan
open import Foundations.Prim.Type
open import Agda.Builtin.Unit

open import Foundations.Notation.Reflexive
open import Foundations.Notation.Symmetric
open import Foundations.Notation.Transitive

private variable
  โแต โแต โ โโฒ : Level
  A : ๐ฐ โแต
  B : ๐ฐ โแต

module _
  {โแต โแต} {A : ๐ฐ โแต} {B : ๐ฐ โแต} {โ โโฒ โโณ : Level}
  (R : A โ B โ ๐ฐ โ) (L : B โ A โ ๐ฐ โโฒ) (O : B โ B โ ๐ฐ โโณ) where

  Invertibility-l : (r : Reflexivity O) (s : Symmetry R L) (t : Transitivity L R O ) โ ๐ฐ (โแต โ โแต โ โ โ โโณ)
  Invertibility-l r s t = {x : A} {y : B} (p : R x y) โ t (s p) p ๏ผ r

  record Inv-l โฆ r : Refl O โฆ โฆ s : Symm R L โฆ โฆ t : Trans L R O โฆ : ๐ฐ (โแต โ โแต โ โ โ โโณ) where
    field โ-inv-l : Invertibility-l (r .refl) (s .sym) (t ._โ_)

open Inv-l โฆ ... โฆ public

Inverse-left : (R : A โ A โ ๐ฐ โ) โฆ _ : Reflexive R โฆ โฆ _ : Symmetric R โฆ โฆ _ : Transitive R โฆ โ Type _
Inverse-left R = Inv-l R R R


module _ {โแต} (A : ๐ฐ โแต) where
  Invertibility-lแต : (r : A) (s : A โ A) (t : A โ A โ A) โ ๐ฐ โแต
  Invertibility-lแต r s t = (x : A) โ t (s x) x ๏ผ r

  record Inv-lแต โฆ r : Reflแต A โฆ โฆ s : Symmแต A โฆ โฆ t : Transแต A โฆ : ๐ฐ โแต where
    field <>-inv-l : Invertibility-lแต (r .mempty) (s .minv) (t ._<>_)

open Inv-lแต โฆ ... โฆ public

instance
  Inv-lแตโInv-l
    : โฆ _ : Reflแต A โฆ โฆ _ : Symmแต A โฆ โฆ _ : Transแต A โฆ โฆ _ : Inv-lแต A โฆ
    โ Inv-l {A = โค} {B = โค} (ฮป _ _ โ A) (ฮป _ _ โ A) (ฮป _ _ โ A)
  Inv-lแตโInv-l .โ-inv-l = <>-inv-l
  {-# INCOHERENT Inv-lแตโInv-l #-}
