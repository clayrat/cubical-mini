{-# OPTIONS --safe #-}
module Foundations.Notation.Inverse.Right where

open import Foundations.Prim.Kan
open import Foundations.Prim.Type
open import Agda.Builtin.Unit

open import Foundations.Notation.Reflexive
open import Foundations.Notation.Symmetric
open import Foundations.Notation.Transitive

private variable
  โแต โแต โ โโฒ : Level
  A : ๐ฐ โแต
  B : ๐ฐ โแต

module _
  {โแต โแต} {A : ๐ฐ โแต} {B : ๐ฐ โแต} {โ โโฒ โโณ : Level}
  (L : A โ B โ ๐ฐ โ) (R : B โ A โ ๐ฐ โโฒ) (O : A โ A โ ๐ฐ โโณ) where

  Invertibility-r : (r : Reflexivity O) (s : Symmetry L R) (t : Transitivity L R O ) โ ๐ฐ (โแต โ โแต โ โ โ โโณ)
  Invertibility-r r s t = {x : A} {y : B} (p : L x y) โ t p (s p) ๏ผ r

  record Inv-r โฆ r : Refl O โฆ โฆ s : Symm L R โฆ โฆ t : Trans L R O โฆ : ๐ฐ (โแต โ โแต โ โ โ โโณ) where
    field โ-inv-r : Invertibility-r (r .refl) (s .sym) (t ._โ_)

open Inv-r โฆ ... โฆ public

Inverse-right : (R : A โ A โ ๐ฐ โ) โฆ _ : Reflexive R โฆ โฆ _ : Symmetric R โฆ โฆ _ : Transitive R โฆ โ Type _
Inverse-right R = Inv-r R R R


module _ {โแต} (A : ๐ฐ โแต) where
  Invertibility-rแต : (r : A) (s : A โ A) (t : A โ A โ A) โ ๐ฐ โแต
  Invertibility-rแต r s t = (x : A) โ t x (s x) ๏ผ r

  record Inv-rแต โฆ r : Reflแต A โฆ โฆ s : Symmแต A โฆ โฆ t : Transแต A โฆ : ๐ฐ โแต where
    field <>-inv-r : Invertibility-rแต (r .mempty) (s .minv) (t ._<>_)

open Inv-rแต โฆ ... โฆ public

instance
  Inv-rแตโInv-r
    : โฆ _ : Reflแต A โฆ โฆ _ : Symmแต A โฆ โฆ _ : Transแต A โฆ โฆ _ : Inv-rแต A โฆ
    โ Inv-r {A = โค} {B = โค} (ฮป _ _ โ A) (ฮป _ _ โ A) (ฮป _ _ โ A)
  Inv-rแตโInv-r .โ-inv-r = <>-inv-r
  {-# INCOHERENT Inv-rแตโInv-r #-}
