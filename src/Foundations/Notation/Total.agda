{-# OPTIONS --safe #-}
module Foundations.Notation.Total where

open import Foundations.Notation.Underlying
open import Foundations.Prim.Type

private variable ‚Ñì ‚Ñì‚Ä≤ : Level

record Total-Œ† {‚Ñì·µÉ} (A : ùí∞ ‚Ñì·µÉ) : Typeœâ where
  infixr 6 Œ†[_]
  field
    ‚Ñì-total-Œ† : Level
    Œ†[_]      : A ‚Üí Type ‚Ñì-total-Œ†
open Total-Œ† ‚¶É ... ‚¶Ñ public

record Total-‚àÄ {‚Ñì·µÉ} (A : ùí∞ ‚Ñì·µÉ) : Typeœâ where
  infixr 6 ‚àÄ[_]
  field
    ‚Ñì-total-‚àÄ : Level
    ‚àÄ[_]      : A ‚Üí Type ‚Ñì-total-‚àÄ
open Total-‚àÄ ‚¶É ... ‚¶Ñ public

record Total-Œ£ {‚Ñì·µÉ} (A : ùí∞ ‚Ñì·µÉ) : Typeœâ where
  infixr 6 Œ£[_]
  field
    ‚Ñì-total-Œ£ : Level
    Œ£[_]      : A ‚Üí Type ‚Ñì-total-Œ£
open Total-Œ£ ‚¶É ... ‚¶Ñ public

instance
  Total-Œ†-Type : Total-Œ† (Type ‚Ñì)
  Total-Œ†-Type {‚Ñì} .‚Ñì-total-Œ† = ‚Ñì
  Total-Œ†-Type .Œ†[_] f = f
  {-# OVERLAPPING Total-Œ†-Type #-}

  Total-Œ†-Underlying : {A : Type ‚Ñì} ‚¶É u : Underlying A ‚¶Ñ ‚Üí Total-Œ† A
  Total-Œ†-Underlying ‚¶É u ‚¶Ñ .‚Ñì-total-Œ† = u .‚Ñì-underlying
  Total-Œ†-Underlying .Œ†[_] = ‚åû_‚åü
  {-# INCOHERENT Total-Œ†-Underlying #-}

  Total-‚àÄ-Type : Total-‚àÄ (Type ‚Ñì)
  Total-‚àÄ-Type {‚Ñì} .‚Ñì-total-‚àÄ = ‚Ñì
  Total-‚àÄ-Type .‚àÄ[_] f = f
  {-# OVERLAPPING Total-‚àÄ-Type #-}

  Total-‚àÄ-Underlying : {A : Type ‚Ñì} ‚¶É u : Underlying A ‚¶Ñ ‚Üí Total-‚àÄ A
  Total-‚àÄ-Underlying ‚¶É u ‚¶Ñ .‚Ñì-total-‚àÄ = u .‚Ñì-underlying
  Total-‚àÄ-Underlying .‚àÄ[_] = ‚åû_‚åü
  {-# INCOHERENT Total-‚àÄ-Underlying #-}

  Total-Œ£-Type : Total-Œ£ (Type ‚Ñì)
  Total-Œ£-Type {‚Ñì} .‚Ñì-total-Œ£ = ‚Ñì
  Total-Œ£-Type .Œ£[_] f = f
  {-# OVERLAPPING Total-Œ£-Type #-}

  Total-Œ£-Underlying : {A : Type ‚Ñì} ‚¶É u : Underlying A ‚¶Ñ ‚Üí Total-Œ£ A
  Total-Œ£-Underlying ‚¶É u ‚¶Ñ .‚Ñì-total-Œ£ = u .‚Ñì-underlying
  Total-Œ£-Underlying .Œ£[_] = ‚åû_‚åü
  {-# INCOHERENT Total-Œ£-Underlying #-}
