{-# OPTIONS --safe #-}
module Foundations.Notation.Symmetric where

open import Foundations.Prim.Type
open import Agda.Builtin.Unit

private variable
  โแต โแต โ โโฒ : Level
  A : ๐ฐ โแต
  B : ๐ฐ โแต

module _
  {โแต โแต} {A : ๐ฐ โแต} {B : ๐ฐ โแต} {โ โโฒ : Level}
  (I : A โ B โ ๐ฐ โ) (O : B โ A โ ๐ฐ โโฒ) where

  Symmetry : ๐ฐ (โแต โ โแต โ โ โ โโฒ)
  Symmetry = {x : A} {y : B} โ I x y โ O y x

  record Symm : ๐ฐ (โแต โ โแต โ โ โ โโฒ) where
    no-eta-equality
    field sym : Symmetry

    -- TODO split these out + additive notation
    infix 90 _โปยน
    _โปยน = sym
    infixl 60 _แตแต
    _แตแต = sym


open Symm โฆ ... โฆ public

Symmetric : (A โ A โ ๐ฐ โ) โ ๐ฐ _
Symmetric R = Symm R R


-- "untyped" raw symmetry is just having an automorphism
record Symmแต {โแต} (A : ๐ฐ โแต) : ๐ฐ โแต where
  no-eta-equality
  field minv : A โ A

open Symmแต โฆ ... โฆ public

instance
  SymmแตโSymm
    : โฆ Symmแต A โฆ
    โ Symm {A = โค} {B = โค} (ฮป _ _ โ A) (ฮป _ _ โ A)
  SymmแตโSymm .sym = minv
  {-# INCOHERENT SymmแตโSymm #-}
