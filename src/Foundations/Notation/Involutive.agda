{-# OPTIONS --safe #-}
module Foundations.Notation.Involutive where

open import Foundations.Prim.Kan
open import Foundations.Prim.Type
open import Agda.Builtin.Unit

open import Foundations.Notation.Symmetric

private variable
  โแต โแต โ โโฒ : Level
  A : ๐ฐ โแต
  B : ๐ฐ โแต

module _
  {โแต โแต} {A : ๐ฐ โแต} {B : ๐ฐ โแต} {โ โโฒ : Level}
  (I : A โ B โ ๐ฐ โ) (O : B โ A โ ๐ฐ โโฒ) where

  Involutivity : (sโ : Symmetry I O) (sโ : Symmetry O I) โ ๐ฐ (โแต โ โแต โ โ)
  Involutivity sโ sโ = {x : A} {y : B} (i : I x y) โ sโ (sโ i) ๏ผ i

  record Invol โฆ sโ : Symm I O โฆ โฆ sโ : Symm O I โฆ : ๐ฐ (โแต โ โแต โ โ โ โโฒ) where
    no-eta-equality
    field sym-invol : Involutivity (sโ .sym) (sโ .sym)

open Invol โฆ ... โฆ public

Involutive : (R : A โ A โ ๐ฐ โ) โฆ s : Symmetric R โฆ โ ๐ฐ _
Involutive R = Invol R R


module _ {โแต} (A : ๐ฐ โแต) where
  Involutivityแต : (s : A โ A) โ ๐ฐ โแต
  Involutivityแต s = (x : A) โ s (s x) ๏ผ x

  record Involแต โฆ s : Symmแต A โฆ : ๐ฐ โแต where
    no-eta-equality
    field minv-invol : Involutivityแต (s .minv)

open Involแต โฆ ... โฆ public

instance
  InvolแตโInvol
    : โฆ s : Symmแต A โฆ โฆ _ : Involแต A โฆ
    โ Invol {A = โค} {B = โค} (ฮป _ _ โ A) (ฮป _ _ โ A)
  InvolแตโInvol .sym-invol = minv-invol
  {-# INCOHERENT InvolแตโInvol #-}
