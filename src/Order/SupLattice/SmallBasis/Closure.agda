{-# OPTIONS --safe #-}
module Order.SupLattice.SmallBasis.Closure where

open import Categories.Prelude

open import Functions.Surjection

open import Data.Unit
open import Data.Maybe renaming (rec to rec·µê)

open import Order.Diagram.Lub
open import Order.Base
open import Order.Category
open import Order.SupLattice
open import Order.Constructions.Product

import Order.Reasoning

open import Order.SupLattice.SmallBasis

module _ {o‚ÇÅ ‚Ñì‚ÇÅ o‚ÇÇ ‚Ñì‚ÇÇ ‚Ñì} {B‚ÇÅ B‚ÇÇ : ùí∞ ‚Ñì}
         (P‚ÇÅ : Poset o‚ÇÅ ‚Ñì‚ÇÅ) (P‚ÇÇ : Poset o‚ÇÇ ‚Ñì‚ÇÇ)
         (L‚ÇÅ : is-sup-lattice P‚ÇÅ ‚Ñì) (L‚ÇÇ : is-sup-lattice P‚ÇÇ ‚Ñì)
         (Œ≤‚ÇÅ : B‚ÇÅ ‚Üí ‚åû P‚ÇÅ ‚åü) (Œ≤‚ÇÇ : B‚ÇÇ ‚Üí ‚åû P‚ÇÇ ‚åü)
         (H‚ÇÅ : is-basis P‚ÇÅ L‚ÇÅ Œ≤‚ÇÅ) (H‚ÇÇ : is-basis P‚ÇÇ L‚ÇÇ Œ≤‚ÇÇ)
         where

  -- to build a product basis we need to construct surjections between ‚Üì·¥Æ (x,y) and ‚Üì·¥Æ x / ‚Üì·¥Æ y
  -- one way to do this is to require Œ≤‚ÇÅ/Œ≤‚ÇÇ to have fibers at ‚ä•
  √ó-‚ä•-small-basis : ‚à• fibre Œ≤‚ÇÅ (is-sup-lattice.bot L‚ÇÅ) ‚à•‚ÇÅ
                   ‚Üí ‚à• fibre Œ≤‚ÇÇ (is-sup-lattice.bot L‚ÇÇ) ‚à•‚ÇÅ
                   ‚Üí is-basis {B = B‚ÇÅ √ó B‚ÇÇ} (P‚ÇÅ √ó P‚ÇÇ) (L‚ÇÅ √ó L‚ÇÇ)
                              < Œ≤‚ÇÅ ‚àò‚Çú fst , Œ≤‚ÇÇ ‚àò‚Çú snd >
  √ó-‚ä•-small-basis fb‚ÇÅ fb‚ÇÇ .is-basis.‚â§-is-small (x‚ÇÅ , x‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) =
    √ó-is-of-size (H‚ÇÅ .is-basis.‚â§-is-small x‚ÇÅ b‚ÇÅ) (H‚ÇÇ .is-basis.‚â§-is-small x‚ÇÇ b‚ÇÇ)
  √ó-‚ä•-small-basis fb‚ÇÅ fb‚ÇÇ .is-basis.‚Üì-is-sup (x‚ÇÅ , x‚ÇÇ) =
    √ó-is-lub-surj
       ( (Œª where
              ((b‚ÇÅ , b‚ÇÇ) , le‚ÇÅ , le‚ÇÇ) ‚Üí b‚ÇÅ , le‚ÇÅ)
       , Œª where
             (b‚ÇÅ , le‚ÇÅ) ‚Üí map (Œª where
                                   (b‚ÇÄ , e‚ÇÄ) ‚Üí
                                       ((b‚ÇÅ , b‚ÇÄ) , (le‚ÇÅ , subst (Œª q ‚Üí P‚ÇÇ .Poset._‚â§_ q x‚ÇÇ) (e‚ÇÄ ‚Åª¬π) (is-sup-lattice.has-bot L‚ÇÇ x‚ÇÇ)))
                                     , refl)
                              fb‚ÇÇ)
       ( (Œª where
              ((b‚ÇÅ , b‚ÇÇ) , le‚ÇÅ , le‚ÇÇ) ‚Üí b‚ÇÇ , le‚ÇÇ)
       , Œª where
             (b‚ÇÇ , le‚ÇÇ) ‚Üí map (Œª where
                                   (b‚ÇÄ , e‚ÇÄ) ‚Üí
                                       ((b‚ÇÄ , b‚ÇÇ) , (subst (Œª q ‚Üí P‚ÇÅ .Poset._‚â§_ q x‚ÇÅ) (e‚ÇÄ ‚Åª¬π) (is-sup-lattice.has-bot L‚ÇÅ x‚ÇÅ) , le‚ÇÇ))
                                     , refl)
                              fb‚ÇÅ)
       (H‚ÇÅ .is-basis.‚Üì-is-sup x‚ÇÅ)
       (H‚ÇÇ .is-basis.‚Üì-is-sup x‚ÇÇ)

module _ {o ‚Ñì ‚Ñì‚Ä≤} {B : ùí∞ ‚Ñì‚Ä≤}
         (P : Poset o ‚Ñì)
         (L : is-sup-lattice P ‚Ñì‚Ä≤)
         (Œ≤ : B ‚Üí ‚åû P ‚åü)
         (H : is-basis P L Œ≤)
         where

  -- to guarantee that Œ≤ has a fiber at ‚ä•, we can freely add it via Maybe
  maybe-basis : is-basis {B = Maybe B} P L (rec·µê (is-sup-lattice.bot L) Œ≤)
  maybe-basis .is-basis.‚â§-is-small x (just b) = H .is-basis.‚â§-is-small x b
  maybe-basis .is-basis.‚â§-is-small x nothing = ‚ä§ , lift‚âÉid ‚àô is-contr‚Üíequiv-‚ä§
                                                     (inhabited-prop-is-contr (is-sup-lattice.has-bot L x) (P .Poset.‚â§-thin)) ‚Åª¬π
  maybe-basis .is-basis.‚Üì-is-sup x .is-lub.fam‚â§lub (mb , le) = le
  maybe-basis .is-basis.‚Üì-is-sup x .is-lub.least ub f =
    H .is-basis.‚Üì-is-sup x .is-lub.least ub Œª where (b , le) ‚Üí f (just b , le)
