{-# OPTIONS --safe #-}
module Order.Semilattice.Meet where

open import Categories.Prelude

open import Order.Base
open import Order.Diagram.Meet
open import Order.Diagram.Top
import Order.Diagram.Meet.Reasoning as Meets
import Order.Reasoning

record is-meet-semilattice {o ‚Ñì} (P : Poset o ‚Ñì) : ùí∞ (o ‚äî ‚Ñì) where
  field
    has-top   : Top P
    has-meets : Has-meets P

  open Top has-top public
  open Meets P has-meets public

unquoteDecl H-Level-is-meet-slat =
  declare-record-hlevel 1 H-Level-is-meet-slat (quote is-meet-semilattice)

private variable o ‚Ñì o‚Ä≤ ‚Ñì‚Ä≤ o‚Ä≥ ‚Ñì‚Ä≥ : Level

record
  is-meet-slat-hom
    {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤} (f : P ‚áí Q)
    (P-slat : is-meet-semilattice P)
    (Q-slat : is-meet-semilattice Q) : Type (o ‚äî ‚Ñì‚Ä≤)
  where
  no-eta-equality
  private
    module P = Poset P
    module P‚Çó = is-meet-semilattice P-slat
    module Q = Order.Reasoning Q
    module Q‚Çó = is-meet-semilattice Q-slat

  field
    ‚ä§-‚â§ : ‚ä§ Q.‚â§ f # ‚ä§
    ‚à©-‚â§ : (x y : P.Ob) ‚Üí f # x ‚à© f # y Q.‚â§ (f # (x ‚à© y))

  pres-‚ä§ : f # ‚ä§ Ôºù ‚ä§
  pres-‚ä§ = Q.‚â§-antisym Q‚Çó.! ‚ä§-‚â§

  pres-‚à© : (x y : P.Ob) ‚Üí f # (x ‚à© y) Ôºù (f # x) ‚à© (f # y)
  pres-‚à© x y = Q.‚â§-antisym
    (Q‚Çó.‚à©-universal _ (f .pres-‚â§ P‚Çó.‚à©‚â§l) (f .pres-‚â§ P‚Çó.‚à©‚â§r))
    (‚à©-‚â§ x y)

  pres-tops
    : ‚àÄ {t}
    ‚Üí is-top P t
    ‚Üí is-top Q (f # t)
  pres-tops {t} t-top x =
    x      ~‚ü® Q‚Çó.! ‚ü©
    ‚ä§      ~‚ü® ‚ä§-‚â§ ‚ü©
    f # ‚ä§  ~‚ü® f .pres-‚â§ (t-top _) ‚ü©
    f # t  ‚àé

  pres-meets
    : ‚àÄ {x y m}
    ‚Üí is-meet P x y m
    ‚Üí is-meet Q (f # x) (f # y) (f # m)
  pres-meets j .is-meet.meet‚â§l = f .pres-‚â§ (is-meet.meet‚â§l j)
  pres-meets j .is-meet.meet‚â§r = f .pres-‚â§ (is-meet.meet‚â§r j)
  pres-meets {x} {y} {m} j .is-meet.greatest ub ub‚â§fx ub‚â§fy =
    ub             ~‚ü® Q‚Çó.‚à©-universal ub ub‚â§fx ub‚â§fy ‚ü©
    f # x ‚à© f # y  ~‚ü® ‚à©-‚â§ x y ‚ü©
    f # (x ‚à© y)    ~‚ü® f .pres-‚â§ (j .is-meet.greatest _ P‚Çó.‚à©‚â§l P‚Çó.‚à©‚â§r) ‚ü©
    f # m          ‚àé

unquoteDecl H-Level-is-meet-slat-hom =
  declare-record-hlevel 1 H-Level-is-meet-slat-hom (quote is-meet-slat-hom)

module _ {R : Poset o‚Ä≥ ‚Ñì‚Ä≥} where
  open Order.Reasoning R
  open is-meet-slat-hom

  instance
    Refl-meet-slat-hom : Refl (is-meet-slat-hom {P = R} refl)
    Refl-meet-slat-hom .refl .‚ä§-‚â§ = refl
    Refl-meet-slat-hom .refl .‚à©-‚â§ _ _ = refl

  module _ {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤} where instance
    Trans-meet-slat-hom
      : {f : P ‚áí Q} {g : Q ‚áí R}
      ‚Üí Trans (is-meet-slat-hom f) (is-meet-slat-hom g) (is-meet-slat-hom (f ‚àô g))
    Trans-meet-slat-hom {g} ._‚àô_ Œ± Œ≤ .‚ä§-‚â§ = Œ≤ .‚ä§-‚â§ ‚àô g .pres-‚â§ (Œ± .‚ä§-‚â§)
    Trans-meet-slat-hom {f} {g} ._‚àô_ Œ± Œ≤ .‚à©-‚â§ x y = Œ≤ .‚à©-‚â§ (f # x) (f # y) ‚àô g .pres-‚â§ (Œ± .‚à©-‚â§ x y)


-- TODO
-- Meet-slats-subcat : ‚àÄ o ‚Ñì ‚Üí Subcat (Posets o ‚Ñì) (o ‚äî ‚Ñì) (o ‚äî ‚Ñì)
-- Meet-slats-subcat o ‚Ñì .Subcat.is-ob = is-meet-semilattice
-- Meet-slats-subcat o ‚Ñì .Subcat.is-hom = is-meet-slat-hom
-- Meet-slats-subcat o ‚Ñì .Subcat.is-hom-prop _ _ _ = hlevel 1
-- Meet-slats-subcat o ‚Ñì .Subcat.is-hom-id = id-meet-slat-hom
-- Meet-slats-subcat o ‚Ñì .Subcat.is-hom-‚àò = ‚àò-meet-slat-hom

-- Meet-slats : ‚àÄ o ‚Ñì ‚Üí Precategory (lsuc o ‚äî lsuc ‚Ñì) (o ‚äî ‚Ñì)
-- Meet-slats o ‚Ñì = Subcategory (Meet-slats-subcat o ‚Ñì)

-- module Meet-slats {o} {‚Ñì} = Cat.Reasoning (Meet-slats o ‚Ñì)

-- Meet-semilattice : ‚àÄ o ‚Ñì ‚Üí Type _
-- Meet-semilattice o ‚Ñì = Meet-slats.Ob {o} {‚Ñì}
