{-# OPTIONS --safe #-}
module Order.Constructions.Product where

open import Categories.Prelude
open import Categories.Diagram.Terminal

open import Order.Base
import Order.Reasoning

private variable o ‚Ñì o‚Ä≤ ‚Ñì‚Ä≤ o‚Ä≥ ‚Ñì‚Ä≥ : Level

_√ó‚Çö_ : Poset o ‚Ñì ‚Üí Poset o‚Ä≤ ‚Ñì‚Ä≤ ‚Üí Poset (o ‚äî o‚Ä≤) (‚Ñì ‚äî ‚Ñì‚Ä≤)
P √ó‚Çö Q = po module √ó‚Çö where
  module P = Order.Reasoning P
  module Q = Order.Reasoning Q

  po : Poset _ _
  po .Poset.Ob = ‚åû P ‚åü √ó ‚åû Q ‚åü
  po .Poset._‚â§_ (x , x‚Ä≤) (y , y‚Ä≤) = (x ‚áí y) √ó (x‚Ä≤ ‚áí y‚Ä≤)
  po .Poset.‚â§-thin = hlevel 1
  po .Poset.‚â§-refl = refl , refl
  po .Poset.‚â§-trans (f , f‚Ä≤) (g , g‚Ä≤) = f ‚àô g , f‚Ä≤ ‚àô g‚Ä≤
  po .Poset.‚â§-antisym (p , p‚Ä≤) (q , q‚Ä≤) = ext (P.‚â§-antisym p q , Q.‚â§-antisym p‚Ä≤ q‚Ä≤)
{-# DISPLAY √ó‚Çö.po a b = a √ó‚Çö b #-}

instance
  √ó-Poset : √ó-notation (Poset o ‚Ñì) (Poset o‚Ä≤ ‚Ñì‚Ä≤) _
  √ó-Poset ._√ó_ = _√ó‚Çö_

module _ {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤} where

  Fst : P √ó Q ‚áí P
  Fst .hom = fst
  Fst .pres-‚â§ = fst

  Snd : P √ó Q ‚áí Q
  Snd .hom = snd
  Snd .pres-‚â§ = snd

  Poset‚ü®_,_‚ü© : {R : Poset o‚Ä≥ ‚Ñì‚Ä≥} ‚Üí R ‚áí P ‚Üí R ‚áí Q ‚Üí R ‚áí P √ó Q
  Poset‚ü® F , G ‚ü© .hom = < F .hom , G .hom >
  Poset‚ü® F , G ‚ü© .pres-‚â§ = < F .pres-‚â§ , G .pres-‚â§ >

Terminal-Poset : Terminal (Posets o ‚Ñì)
Terminal-Poset .Terminal.top = ùüô‚Çö
Terminal-Poset .Terminal.has-‚ä§ _ .fst .hom = _
Terminal-Poset .Terminal.has-‚ä§ _ .fst .pres-‚â§ = _
Terminal-Poset .Terminal.has-‚ä§ _ .snd _ = trivial!
